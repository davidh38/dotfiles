#+STARTUP: fold

* Advise for Mac users
When using macosx, use s-SPC with shift for mark command
* Fade out menu bar and tool bar
:PROPERTIES:
:ID:       429526d3-717c-4771-a124-658a26c367c7
:END:
save space by not showing the menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC

save space by not showing the tool bar 
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC

#+RESULTS:

* Melpa and Elpa
add packages to retrieve packages =package-install= from other repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
#+END_SRC
* Doom Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
                                          ; if nil, bold is universally disabled
          doom-themes-enable-italic t)
                                          ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Corrects
    ;;  org-mode's native fontification.
    (doom-themes-org-config))
                                          ; doom line looks much nicer
                                          ; remember to install nerd fonts nerd-icons-install-fonts
  (unless (member "Symbols Nerd Font Mono" (font-family-list))
  (nerd-icons-install-fonts t))

  (use-package all-the-icons
    :ensure t)

  (use-package
    doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1))


  #+END_SRC
* Font size
#+BEGIN_SRC emacs-lisp
  ;todo configure for mac as well 
  (set-face-attribute 'default nil :height 170)
#+END_SRC

#+RESULTS:

* Clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    )
#+END_SRC
REPL for clojure
#+BEGIN_SRC emacs-lisp
  (unless
    (package-installed-p 'cider)
    (package-install 'cider))

#+END_SRC
* Which key 
#+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure t)
  (which-key-mode 1)
#+END_SRC
* Which key map
#+BEGIN_SRC emacs-lisp
    ;; shows shortcuts, when clicking C-x
    (setq dave/file-map
          (make-sparse-keymap))
                                            ;
    (define-key dave/file-map "s"
                '("Save file" . save-buffer))
    (define-key dave/file-map "r"
                '("Open Recent files" . consult-recent-file))
                                            ;
    (define-key dave/file-map "f"
                '("find file" . find-file))
      (define-key dave/file-map "C"
                '("copy file" . doom/copy-this-file))

  (setq dave/search-map
          (make-sparse-keymap))
    (define-key dave/search-map "s"
                '("search-buffer" . consult-line))
  (define-key dave/search-map "i"
                '("Jump to symbol" . consult-imenu))                                            ;
    (setq dave/attach-map
          (make-sparse-keymap))
                                            ;
    (define-key dave/attach-map "p"
                '("attach" . org-download-clipboard))
                                            ;
    (setq dave/links-map
          (make-sparse-keymap))
                                            ;
    (define-key dave/links-map "s"
                '("store link" . org-store-link))

  (setq dave/org-map
          (make-sparse-keymap))
    (define-key dave/org-map "."
                '("search-heading" . consult-org-heading))
                                            ;
    (define-key dave/org-map "l"
                (cons "links" dave/links-map))
                                            ;
    (define-key dave/org-map "a"
                (cons "attachments" dave/attach-map))

  (setq dave/notes-map
          (make-sparse-keymap))
    (define-key dave/notes-map "a"
                '("agenda" . org-agenda))
                                            ;
    (setq dave/projectile-map
          (make-sparse-keymap))
                                            ;
    (define-key dave/projectile-map "p"
               '("switch to project" . projectile-switch-project))
                                            ;
    (define-key dave/projectile-map "a"
                '("add project" . projectile-add-known-project))
                                            ;
    (define-key dave/projectile-map "f"
                '("find file in project" . projectile-find-file))
                                            ;
    (setq dave/bindings-map
          (make-sparse-keymap))

                                            ;
    (define-key dave/bindings-map "t"
                '("bindings map" . which-key-show-top-level))
                                            ;
    (setq dave/help-map
          (make-sparse-keymap))
                                            ;
    (define-key dave/help-map "b"
                (cons "bindings" dave/bindings-map))
    (setq dave/my-map
          (make-sparse-keymap))
    (define-key dave/my-map "m"
                (cons "org" dave/org-map))
    (define-key dave/my-map "s"
                (cons "search" dave/search-map))
    (define-key dave/my-map "f"
                (cons "files" dave/file-map))
                                            ;
    (define-key dave/my-map "n"
                (cons "notes" dave/notes-map))
                                            ;
    (define-key dave/my-map "p"
                (cons "project" dave/projectile-map))
                                            ;
    (define-key dave/my-map "h"
                (cons "help" dave/help-map))
                                            ;
    (define-key dave/my-map "X"
                '("Capture" . dave/org-capture))
                                            ;(define-key evil-normal-state-map

    (global-set-key
     (kbd "C-c")
     dave/my-map)

#+END_SRC

#+RESULTS:
: (keymap (88 Capture . dave/org-capture) (104 help keymap (98 bindings keymap (116 bindings map . which-key-show-top-level))) (112 project keymap (102 find file in project . projectile-find-file) (97 add project . projectile-add-known-project) (112 switch to project . projectile-switch-project)) (110 notes keymap (97 agenda . org-agenda)) (102 files keymap (67 copy file . doom/copy-this-file) (102 find file . find-file) (114 Open Recent files . consult-recent-file) (115 Save file . save-buffer)) (115 search keymap (105 Jump to symbol . consult-imenu) (115 search-buffer . consult-line)) (109 org keymap (97 attachments keymap (112 attach . org-download-clipboard)) (108 links keymap (115 store link . org-store-link)) (46 search-heading . consult-org-heading)))

* Remap key bindings for the Charachorder 
#+BEGIN_SRC emacs-lisp
      (defun my-org-mode-setup ()
      (define-key org-mode-map (kbd "M-]") 'org-forward-element)
      (define-key org-mode-map (kbd "M-[") 'org-backward-element)
      )

    (add-hook 'org-mode-hook 'my-org-mode-setup)
#+END_SRC

#+RESULTS:
| turn-on-auto-fill | (lambda nil (setq fill-column 120)) | my-org-mode-setup | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* Search in Emacs 
#+BEGIN_SRC emacs-lisp
  ;;                    ;; m-x preview /  find file preview
  (unless
      (package-installed-p 'vertico)
    (package-install 'vertico))
  (require 'vertico)
  (vertico-mode 1)
                                          ; find file preview last used in hours etc.
                                                                                                                                                                                                   ;;; `marginalia' is a package that we need to install.
  (unless
      (package-installed-p 'marginalia)
    (package-install 'marginalia))
                                          ;
  (require 'marginalia)
                                          ;
  (marginalia-mode 1)
                                          ;better regex search in find file / recentfile / m-x
  (unless
      (package-installed-p 'orderless)
    (package-install 'orderless))
  (require 'orderless)
  (setq completion-styles
        '(orderless basic)
        completion-category-overrides
        '((file
           (styles basic partial-completion orderless))))


  (unless
      (package-installed-p 'consult)
    (package-install 'consult))
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :config
    (setq consult-narrow-key "<")
    ;; "C-+"
                                          ;
                                          ;    (mode-specific-map)
                                          ;("C-c M-x" . consult-mode-command)
                                          ;("C-c h" . consult-history)
                                          ;	 )

    )

  ;;must be enabled for consult
  (require 'recentf)
  (recentf-mode 1)

  #+END_SRC
* Org mode 
#+BEGIN_SRC emacs-lisp

     ;; Setup the org folder
    (setq org-directory "~/Dropbox/org")
    (setq org-agenda-files (list org-directory))
;       (setq org-agenda-files
 ;          '("~/Dropbox/org/schedule.org" "~/Dropbox/org/schedule.org_archive" "~/Dropbox/org/birthdays.org" "~/Dropbox/org/events.org" "~/Dropbox/org/work.org"            )
;           )

    (setq org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil)

    ; use a depth level of 6 max
    (setq org-refile-targets
          '((org-agenda-files . (:maxlevel . 3))))

  
              (setq org-attach-id-dir "~/Dropbox/org/.attach/")
              (setq org-attach-set-directory "~/Dropbox/org/.attach/")

              (unless
                  (package-installed-p 'org-download)
                (package-install 'org-download)
                )
              (require 'org-download)
              (setq org-image-actual-width 800)									;(with-eval-after-load 'org
                                                      ;  (org-download-enable) not really needed

              (setq org-adapt-indentation t)
              (setq org-startup-indented t)

              ;;                                                                                  ;(global-set-key (kbd "C-c l") #'org-store-link)
              ;;                                                                                  ;(global-set-key (kbd "C-c a") #'org-agenda)
              ;;                                                                                  ;(global-set-key (kbd "C-c c") #'org-capture)


              (setq   org-highest-priority ?A
                      org-default-priority ?B
                      org-lowest-priority ?D
                      org-priority-faces '((?A :foreground "#DC143C" :weight bold)
                                           (?B :foreground "#E76E34" :weight bold)
                                           (?C :foreground "#D8A743" :weight bold)
                                           (?D :foreground "#3BAB60" :weight bold))
                      )

              (setq org-todo-keywords
                    '((sequence "TODO" "|" "DONE" "KILL")))



              ;;   ; new line at 120
              (add-hook 'org-mode-hook '(lambda () (setq fill-column 120)))
              (add-hook 'org-mode-hook 'turn-on-auto-fill)

                                                      ; consult for consult open recent file
#+END_SRC

#+RESULTS:
| turn-on-auto-fill | (lambda nil (setq fill-column 120)) | my-org-mode-setup | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* Org-agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-function-global
        '(org-agenda-skip-entry-if 'todo '("DONE" "KILL")))



                                          ;(Lambda () (writeroom-mode 1)))
  (setq org-tags-exclude-from-inheritance '("time_booking"))
  (setq org-agenda-start-on-weekday 1)         ;; calendar begins today
  (setq org-agenda-start-day "1d")

  (setq org-agenda-clockreport-parameter-plist
                                          ;'(:scope file :maxlevel 3 :link t :properties ("Effort") :formula "$5='(- $1 $4);U::@1$1=string(\"Effort\")::@1$3=string(\"Total\")::@1$4=string(\"Task time\")" :formatter my-clocktable-write)
                                          ;'(:maxlevel 3) :properties ("Effort") :fileskip0 t :formatter my-clocktable-write :formula "$7='(- $2 $4);U::$8='(- $2 $5);U::$9='(- $2 $6);U" )
        '(:maxlevel 4 ;:properties ("Effort") :fileskip0 t :formatter my-clocktable-write :formula "$9='(- $3 $5);U::$10='(- $2 $6);U::$11='(- $2 $7);U::$12='(- $3 $8);U"
                    )
        )

  (setq org-agenda-custom-commands
                                          ;	     (append org-agenda-custom-commands
        '(

          ("n" "all"
           (
            (agenda ""

                    (
                                             (org-agenda-files (list org-directory))
                                             (org-agenda-span 7)                      ;; overview of appointments
                                                                     (calendar-week-start-day 0)
                                                                     (org-agenda-start-on-weekday 1)         ;; calendar begins today
                                                                     (org-agenda-include-inactive-timestamp t)
                                                                     )
                    )

                                          ;(tagst-odo "-personal")
            )

           )


          ("w" "work todos"
           (
            (agenda ""

                    (


                     (org-agenda-files '("~/Dropbox/org/work.org" "~/Dropbox/org/work.org_archive"))

                     (org-agenda-span 7)                      ;; overview of appointments
                     (calendar-week-start-day 0)
                     (org-agenda-start-on-weekday 1)         ;; calendar begins today
                     )
                    )
            (tags-todo "work")
                                          ;(tagst-odo "-personal")
            )

           )


          ("i" "inbox todos"
                                          ; das ist fuer die todas
           (
            (agenda ""
                    (
                     (org-agenda-files '("~/Dropbox/org/schedule.org" "~/Dropbox/org/schedule.org_archive"))
                                          ;		  ;(org-agenda-sorting-strategy '(priority-up effort-down))
                     (org-agenda-span 7)                      ;; overview of appointments
                     (calendar-week-start-day 0)
                     (org-agenda-start-on-weekday 1)         ;; calendar begins today)

                     )
                    )
            (tags-todo "inbox")
            )
           )
          )
                                          ;  )
        )

#+END_SRC

#+RESULTS:
| n | all         | ((agenda  ((org-agenda-files (list org-directory)) (org-agenda-span 7) (calendar-week-start-day 0) (org-agenda-start-on-weekday 1) (org-agenda-include-inactive-timestamp t))))                     |
| w | work todos  | ((agenda  ((org-agenda-files '(~/Dropbox/org/work.org ~/Dropbox/org/work.org_archive)) (org-agenda-span 7) (calendar-week-start-day 0) (org-agenda-start-on-weekday 1))) (tags-todo work))          |
| i | inbox todos | ((agenda  ((org-agenda-files '(~/Dropbox/org/schedule.org ~/Dropbox/org/schedule.org_archive)) (org-agenda-span 7) (calendar-week-start-day 0) (org-agenda-start-on-weekday 1))) (tags-todo inbox)) |

* Encryption 
#+BEGIN_SRC emacs-lisp
  (require 'epa-file)
  (epa-file-enable)  
#+END_SRC
* reveal.js for presentation
install ox-reveal first
install reveal.js
#+BEGIN_SRC emacs-lisp
(require 'ox-reveal)
(setq org-reveal-root "file://~/.emacs.d/reveal.js")
#+END_SRC

#+RESULTS:
: file:///home/dave/.emacs.d/reveal.js
* Emacs 29.2
Magit is included in 29.2
#+BEGIN_SRC emacs-lisp

  
  (if (string= (substring (emacs-version) 0 14) "GNU Emacs 29.1")
       (use-package projectile :ensure t)
    (use-package magit
           :ensure t)
    (use-package magit-section
           :ensure t)
    )


         ;;       ,*** roam only 29.2
         ;;                                                                  org roam
         ;;		      (use-package org-roam :ensure t)
         ;; first set			  org-roam
         ;;			     (setq org-roam-directory (file-truename

         ;;			  (concat my-homedir "/Dropbox/org-roam")))
         ;;			  (org-roam-db-autosync-mode) ;; *** Which key ***



#+END_SRC

#+RESULTS:
* Doom functions:
#+BEGIN_SRC emacs-lisp
			    (defun doom--update-files (&rest files)
			      "Ensure FILES are updated in `recentf', `magit' and `save-place'."
			      (let (toplevels)
				(dolist (file files)
				  (when (featurep 'vc)
				    (vc-file-clearprops file)
				    (when-let (buffer (get-file-buffer file))
				      (with-current-buffer buffer
					(vc-refresh-state))))
				  (when (featurep 'magit)
				    (when-let (default-directory (magit-toplevel (file-name-directory file)))
				      (cl-pushnew default-directory toplevels)))
				  (unless (file-readable-p file)
				    (when (bound-and-true-p recentf-mode)
				      (recentf-remove-if-non-kept file))
				    (when (and (bound-and-true-p projectile-mode)
					       (doom-project-p)
					       (projectile-file-cached-p file (doom-project-root)))
				      (projectile-purge-file-from-cache file))))
				(dolist (default-directory toplevels)
				  (magit-refresh))
				(when (bound-and-true-p save-place-mode)
				  (save-place-forget-unreadable-files))))




			    (defun doom/copy-this-file (new-path &optional force-p)
			      "Copy current buffer's file to NEW-PATH.

										  If FORCE-P, overwrite the destination file if it exists, without confirmation."

			      (interactive
			       (list (read-file-name "Copy file to: ")
				     current-prefix-arg))
			      (unless (and buffer-file-name (file-exists-p buffer-file-name))
				(user-error "Buffer is not visiting any file"))
			      (let ((old-path (buffer-file-name (buffer-base-buffer)))
				    (new-path (expand-file-name new-path)))
				(make-directory (file-name-directory new-path) 't)
				(copy-file old-path new-path (or force-p 1))
				(doom--update-files old-path new-path)
				(message "File copied to %S" (abbreviate-file-name new-path))))
#+END_SRC

* Set left margin
#+BEGIN_SRC emacs-lisp
(add-hook 'window-configuration-change-hook
          (lambda ()
            (set-window-margins (car (get-buffer-window-list (current-buffer) nil t)) 30 0)))
#+END_SRC

#+RESULTS:
| (lambda nil (set-window-margins (car (get-buffer-window-list (current-buffer) nil t)) 30 0)) | (lambda nil (set-window-margins (car (get-buffer-window-list (current-buffer) nil t)) 10 0)) | doom-modeline-invalidate-huds | doom-modeline-refresh-bars | window--adjust-process-windows |

* rereveal
#+BEGIN_SRC emacs-lisp
  (require 'org-re-reveal)
#+END_SRC
